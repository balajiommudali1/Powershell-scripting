
PowerShell Overview

- An automation engine that provides a task based command line interface, a dynamic scripting environment, an interactive shell engine,
  and much more oo scripting langugage.
- Built on the .NET framework and gives a common ground for developer and IT professinals.
- Easy to learn and a tooll for automation/managing systems.
- Part of windows management framework(WMF)
- Part of microsoft CEC

Powershell Installation

- Windows Powershell is pre-installed by default in windows server 2008 R2 and windows
- Windows Powershell requires the Microsoft .NET framework 2.0 with service pack1.
- Windows Powershell ISE requires the microsoft .NET framework 3.5 with service Pack 1

PS C:\Users\balajo> Get-Service
PS C:\> get-help | more

Cmdlets

- A cmdlet is single feature command that manipulates objects in windows powershell.

Scripting

In Windows Powershell, script files have a .ps1 file name extension. To run script, type the name of the script at the command prompt.

The name extension is optional

For example:

C:\test\Hello.ps1


PowerShell Overview

- An automation engine that provides a task based command line interface, a dynamic scripting environment, an interactive shell engine,
  and much more oo scripting langugage.
- Built on the .NET framework and gives a common ground for developer and IT professinals.
- Easy to learn and a tooll for automation/managing systems.
- Part of windows management framework(WMF)
- Part of microsoft CEC

Powershell Installation

- Windows Powershell is pre-installed by default in windows server 2008 R2 and windows
- Windows Powershell requires the Microsoft .NET framework 2.0 with service pack1.
- Windows Powershell ISE requires the microsoft .NET framework 3.5 with service Pack 1

PS C:\Users\balajo> Get-Service
PS C:\> get-help | more

Cmdlets

- A cmdlet is single feature command that manipulates objects in windows powershell.

Scripting

In Windows Powershell, script files have a .ps1 file name extension. To run script, type the name of the script at the command prompt.

The name extension is optional

For example:

C:\test\Hello.ps1

PS C:\Users\bo\Desktop> get-help Get-Process

PS C:\Users\bo\Desktop> Get-Process powershell

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
    459      59    82268      83348   660     4.07   8940 powershell

Get-help and Get command
- To get help for a windows powershell commannds, Get-Help followed by the
command name, such as: Get-Help Get-Process

- Get-Command can help you with. Just type Get-command without any additional
] parameters and you'll get back a list of all the windows powershell cmdlets

PS C:\Users\bo\Desktop> get-help Get-Process

PS H:\> Get-Command

Execution Policy
- The Get-ExecutionPolicy cmdlet simply tells you which of the four execution policies( policies that determine which windows powershell scripts,if any will run on your computer) is currently
in-force. The windows powershell execution policies include the following:

- Restricted - no script can be run. Windows powershel can be use only in interactive mode.
- AllSigned - Only scripts signed by a trusted publisher can be run.
- Remotesingned - Downloaded scripts must be singed by trusted published before they can be run.
- Unrestricted - No restrictions: all windows powershell  scripts can be run.
- The Set-ExecutionPolicy cmdlet enables you to determine which windows powershell sript
will be allowed to run on your computer. Windows powershell has four different
 execution polices.

#Get-ExecutionPolicy
#Set-ExecutionPolicy Restricted
#Set-ExecutionPolicy unRestricted

Format Output

 PS H:\> Get-Service|Format-Table -Wrap

Advantages and Disadvantages of PowerShell

Advantages
- Object-Oriented
- .NET objects and forms supported
- More Functions compared to cmd.exe and VBScript 
more Extensible via cmdlets, plugins
- Background jobs
- Ease of administration

Disadvantages

- Remoting creates opennings for an attacker to exploit
- WinRM requires a Web server to run on the server.


Operator in PowerShell
Arithmetic Operator: +,-,/,%
Comparison Operators: -eq, -ne, -lt, -gt, -le,  -ge, -contain, -
Wildcard and RegEX: -like, -notlike, -match, -notmatch, -replace
Logical and bitwise: -and, -or, -xor, -band, -bot, -bxor, and -bnot.

$var1 = 3
$var2 = 5
$var1 == $var2





Get-Service -Name "*A"
$firstname = "Balaji"
if($firstname -like "A*")
{
write-host " your name start with A"
}
else
{
write-host " your name start with A"
}
Conditional Execution
if Statement
 Powershell 'if' statement comes under the umbrella of flow control.
Once you master the basic construction then you can increase it's usefulless by appending.
'Else' and 'Elself' Statement.

Example
$file Get-Help about_if
if ($file -Match "statement") 
{
Write-Host "Hello msg"
}
else
{
Write-Host "Wrong msg"
}
 $var1 = 10

if( $var1 -eq 10)
{
Write-Host " equal"
}
else
{
Write-Host "Not Equal"
} 

 $x = 0
do
{
 Write-Host "Output $i"
  $i++
 }
 while ($x -gt 0) 



 $x = 0
do
{
 Write-Host "Output $i"
  $i++
 }
 while ($x -le 5) 


 for ($i = 1; $i -lt 99; $i++)
{
write-host "print number $i"
} 

 $myarray = @("Balaji","Ommudali")

foreach ($item in $myarray)
{
Write-Host $item
} 

 $x="balaji"
switch ($x)
{
'balaji' { Write-Host "you are Balaji"}
'Ravi' {Write-Host "you are Ravi"}
Default {}
}

Functions in Powershell
- Functions provides the interface between your code and the user. They can define
parameters, parameter typres, even provide help, much like cmdlets. A block of code may be
contained within a functions for easy to reuse. To create a function, call the function keyword 
followed by name for the function, then include your code inside a pair of curly braces.

function function-name (function-parameters) { <function-body> }
 Function MyFunc ([int]$a, [int]$b)
{
$c = $a+$b
Write-Host "Sum is $c"
}

MyFunc -a  2 -b 7



https://github.aig.net/AIGM-DevOps
https://urldefense.proofpoint.com/v2/url?u=https-3A__aiguc.webex.com_aiguc_lsr.php-3FRCID-3Daea726f8485a4d2186668dd6245e3c21&d=DwMGaQ&c=kn4_INW_mBCDHV_xJEVJkg&r=LyitaTrtE8NXFxT1LLC5tdg7F37jdz56rbC1rK7beXI&m=CPS3TqcQQzVxTuksvHsKtM0u5c9inwH0km6N054_bSg&s=DdMuYa64_CZgg4SJDwYg7_NBMuE-WCZEtyhR5umvxAw&e=
zEUUjMP8 

https://jenkins.io/doc/book/pipeline/getting-started/
https://jenkins.io/doc/book/pipeline/syntax/
https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/
